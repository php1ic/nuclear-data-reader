name: BuildAndTest

on: #[push, pull_request]
  push:
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - 'data/**'
      - 'scripts/**'

jobs:
  linux-build:
    name: Compilation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [clang++, g++]
        type: [Debug, Release]

    steps:
      - uses: actions/checkout@v2
      - name: Checkout submodules
        shell: bash
        run: |
          # If your submodules are configured to use SSH instead of HTTPS please uncomment the following line
          # git config --global url."https://github.com/".insteadOf "git@github.com:"
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
        # We currently compile against C++17 so default gcc and clang on ubuntu-latest are too old
      - name: Install dependencies
        run: sudo apt update && sudo apt install -y ninja-build ccache clang lcov gcc g++ clang
      - name: Configure
        run: cmake -GNinja -H. -B../Build -DNDR_UNIT_TESTS=ON -DCMAKE_CXX_COMPILER=/usr/bin/${{ matrix.compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.type }} -DNDR_CODE_COVERAGE=ON
      - name: Build
        run: cmake --build ../Build
      - name: Test
        run: cd ../Build && ctest -j2 -V
      - name: Generate coverage report
        if: ${{ matrix.type == 'Debug' && matrix.compiler == 'g++' }}
        run: |
          cd ../Build
          lcov --directory . --capture --gcov-tool /usr/bin/gcov --output-file coverage.info
          lcov --remove coverage.info '/usr/*' '*/tests/*' '*/external/*' --output-file coverage.info
          lcov --list coverage.info
      - name: Upload coverage report to codecov
        if: ${{ matrix.type == 'Debug' && matrix.compiler == 'g++' }}
        uses: codecov/codecov-action@v1
        with:
          file: ../Build/coverage.info
      - name: Upload coverage report to codacy
        if: ${{ matrix.type == 'Debug' && matrix.compiler == 'g++' }}
        # uses: codacy/codacy-coverage-reporter-action@master
        # with:
        #   project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        #   coverage-reports: ./Build/coverage.info
        run: |
          export CODACY_PROJECT_TOKEN=${{ secrets.CODACY_PROJECT_TOKEN }}
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r ../Build/coverage.info
